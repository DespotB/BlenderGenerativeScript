import bpy
import random
from pprint import pprint

class Gemesis:
    def __init__(self, gemId, upperBox, lowerBox, background, gemStone, table):
        #assign chosen traits to gemesis
        self.gemId = gemId
        self.upperBox = upperBox
        self.lowerBox = lowerBox
        self.background = background
        self.gemStone = gemStone
        self.table = table
    
    #TODO    
    def hashMe(self):
        #do hash so there are no duplicates
        print("hashing")


class Traits:
    def __init__(self):
        #ADD ALL OBJECTS FROM ONE COLLECTION TO EACH LIST
        self.upperBoxes = bpy.data.collections['UpperBoxes'].all_objects  #objects in objects are not good as they get displayed seperately
        self.lowerBoxes = bpy.data.collections['LowerBoxes'].all_objects
        self.gemStones = bpy.data.collections['GemStones'].all_objects
        self.backgrounds = bpy.data.collections['Backgrounds'].all_objects
        self.tables = bpy.data.collections['Table'].all_objects
    

class GemesisGenerator():
    def createRandomGem(gemId, traits):
        #RANDOMLY CHOOSE ONE OF THE TRAITS (OBJECTS)
        #To chose with specifc probabilites in % uses below method (this examplet there are 5 objects to choose from) first object with lowest posibility
        #upperBox = random.choice(traits.upperBoxes, weights=(10,20,30,40,50), k=1))
        upperBox = random.choice(traits.upperBoxes)
        lowerBox = random.choice(traits.lowerBoxes)
        background = random.choice(traits.backgrounds)
        gemStone = random.choice(traits.gemStones)
        table = random.choice(traits.tables)
        
        #CREATE GEM WITH CHOSEN TRAITS
        gemesis = Gemesis(gemId, upperBox, lowerBox, background, gemStone, table) 
        
        #MAKE ONLY CHOSEN ITEMS VISIBLE AND RENDERABLE
        #TODO make function for this process
        bpy.data.objects[gemesis.upperBox.name].hide_render = False
        bpy.data.objects[gemesis.upperBox.name].hide_viewport = False
        bpy.data.objects[gemesis.upperBox.name].hide_set(False)
        
        bpy.data.objects[gemesis.lowerBox.name].hide_render = False
        bpy.data.objects[gemesis.lowerBox.name].hide_viewport = False
        bpy.data.objects[gemesis.lowerBox.name].hide_set(False)
        
        bpy.data.objects[gemesis.background.name].hide_render = False
        bpy.data.objects[gemesis.background.name].hide_viewport = False
        bpy.data.objects[gemesis.background.name].hide_set(False)
        
        bpy.data.objects[gemesis.gemStone.name].hide_render = False
        bpy.data.objects[gemesis.gemStone.name].hide_viewport = False
        bpy.data.objects[gemesis.gemStone.name].hide_set(False)
        
        bpy.data.objects[gemesis.table.name].hide_render = False
        bpy.data.objects[gemesis.table.name].hide_viewport = False
        bpy.data.objects[gemesis.table.name].hide_set(False)
        
        print("Gem with gemId " + str(gemId) + " created")
    
    
    def hideAll():
        bpy.ops.object.select_all(action='DESELECT')
        #hide all inactive objects
        for obj in bpy.data.objects:
            #obj.hide_viewport = False #Enable visibility in all viewports
            obj.hide_render = True #Enable the object in renders
            obj.hide_set(True) #Enable the object in the viewport
            obj.hide_select = True #Enable selection in the viewport
        print("Hidden")
    
    def unHideAll():
        bpy.ops.object.select_all(action='DESELECT')
        #Unhide all inactive objects
        for obj in bpy.data.objects:
            obj.hide_render = False #Enable the object in renders
            obj.hide_set(False) #Enable the object in the viewport
            obj.hide_select = False #Enable selection in the viewport
        print("Unhidden")
    
    def unHideCameraAndLight():
        #implement
        donothing = 0
    
    #TODO
    def saveAsImage():
        #safe the image in a file
        donothing = 0
    
    #TODO
    def saveMetadataAsJson():
        #safe the metadata to json
        donothing = 0
    
    #TODO
    def renderAnimation():
        #render the outcome of the gemesis generator
        #do this before saving the gem
        donthing = 0
    
    ##DO THE MAIN STUFF
    i = 1;          #gemID
    maxAmount = 2   #amount of gems you want to create
    while i <= maxAmount:
        hideAll()
        
        allTraits = Traits()
        #ADD ID counter
       
        createRandomGem(i, allTraits)
        i = i + 1
    

#ALL OF THIS STUFF PROBABLY NOT NEEDED

 #CHOOSE RANDOM MATERIALS
        #upperBoxMaterial = random.choice(materials.upperBoxes)
         
        #CHOOSE RANDOM TEXTURES
        #upperBoxTexture = random.choice(textures.upperBoxes)
        
        #ASSIGN TEXTURES TO MATERIALS
        #upperBoxMaterial.texture_slots.add().texture = upperBoxTexture
        
        #ASSIGN MATERIALS TO OBJECTS
        #bpy.data.objects[gemesis.upperBox.name].data.materials.append(upperBoxMaterial)


#REMOVE ALL MATERIALS FROM OBJECT
        #for material in bpy.data.objects[gemesis.upperBox.name].data.materials:
        #    material.user_clear()
        #    bpy.data.materials.remove(material)
             
        #bpy.data.objects[gemesis.upperBox.name].data.materials.append(upperBoxMaterial)
        #pprint("Material: " + str(bpy.data.objects[gemesis.upperBox.name].data.materials[0]))
        #pprint("Tex: " + str(bpy.data.objects[gemesis.upperBox.name].data.materials[0].node_tree.nodes[0]))

#class Textures:      
#   def __init__(self):
#      #ADD ALL TEXTURES TO SUITING LISTS
#     upperBoxesTextures = [bpy.data.textures.get("gemStone_blue")]#,bpy.data.textures.get("gemStone_blue")]
#    
#   #ASIGN LIST TO SUITING PROPERTIES
#  self.upperBoxes = upperBoxesTextures
        
        
#class Materials:
#    def __init__(self):
#        #ADD ALL MATERIAL TO SUITING LISTS
#        upperBoxesMaterials = [bpy.data.materials.get("Material.005")]#,bpy.data.materials.get("gemStone_blue")]
#        
#        #ASGIN LIST TO SUITING PROPERTIES
#        self.upperBoxes = upperBoxesMaterials
       
       
#INFO        
  #PRINTS ALL Properties OF OBJECT
        #pprint(vars(my_object))
   