import bpy
import random
import json
from pprint import pprint

class Gemesis:
    def __init__(self, gemId, upperBox, lowerBox, background, gemStone, table, talisman):
        #assign chosen traits to gemesis
        self.gemId = gemId
        self.upperBox = upperBox
        self.lowerBox = lowerBox
        self.background = background
        self.gemStone = gemStone
        self.table = table
        self.talisman = talisman

    def __hash__(self):
        print ("hash done in gemesis class")
        return hash((self.upperBox, self.lowerBox, self.background, self.gemStone, self.table, self.talisman))

class Traits:
    def __init__(self):
        #ADD ALL OBJECTS FROM ONE COLLECTION TO EACH LIST
        self.upperBoxes = bpy.data.collections['UpperBoxes'].all_objects  #objects in objects are not good as they get displayed seperately
        self.lowerBoxes = bpy.data.collections['LowerBoxes'].all_objects
        self.gemStones = bpy.data.collections['GemStones'].all_objects
        self.backgrounds = bpy.data.collections['Backgrounds'].all_objects
        self.tables = bpy.data.collections['Table'].all_objects
        self.talisman = bpy.data.collections['Talisman'].all_objects

class GemesisGenerator():
    
    
    def createRandomGem(self, gemId, traits):
        #RANDOMLY CHOOSE ONE OF THE TRAITS (OBJECTS)
        #To chose with specifc probabilites in % uses below method (this examplet there are 5 objects to choose from) first object with lowest posibility
        #upperBox = random.choice(traits.upperBoxes, weights=(10,20,30,40,50), k=1))
        upperBox = random.choice(traits.upperBoxes)
        lowerBox = random.choice(traits.lowerBoxes)
        background = random.choice(traits.backgrounds)
        gemStone = random.choice(traits.gemStones)
        table = random.choice(traits.tables)
        talisman = random.choice(traits.talisman, cum_weights=(75,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,), k=1))
        
        #CREATE GEM WITH CHOSEN TRAITS
        gemesis = Gemesis(gemId, upperBox, lowerBox, background, gemStone, table, talisman) 
        
        #MAKE ONLY CHOSEN ITEMS VISIBLE AND RENDERABLE
        #TODO make function for this process
        bpy.data.objects[gemesis.upperBox.name].hide_render = False
        bpy.data.objects[gemesis.upperBox.name].hide_viewport = False
        bpy.data.objects[gemesis.upperBox.name].hide_set(False)
        
        bpy.data.objects[gemesis.lowerBox.name].hide_render = False
        bpy.data.objects[gemesis.lowerBox.name].hide_viewport = False
        bpy.data.objects[gemesis.lowerBox.name].hide_set(False)
        
        bpy.data.objects[gemesis.background.name].hide_render = False
        bpy.data.objects[gemesis.background.name].hide_viewport = False
        bpy.data.objects[gemesis.background.name].hide_set(False)
        
        bpy.data.objects[gemesis.gemStone.name].hide_render = False
        bpy.data.objects[gemesis.gemStone.name].hide_viewport = False
        bpy.data.objects[gemesis.gemStone.name].hide_set(False)
        
        bpy.data.objects[gemesis.table.name].hide_render = False
        bpy.data.objects[gemesis.table.name].hide_viewport = False
        bpy.data.objects[gemesis.table.name].hide_set(False)
        
        bpy.data.objects[gemesis.talisman.name].hide_render = False
        bpy.data.objects[gemesis.talisman.name].hide_viewport = False
        bpy.data.objects[gemesis.talisman.name].hide_set(False)
        
        print("Gem with gemId " + str(gemId) + " created")
        return gemesis
    
    def hideAll(self):
        bpy.ops.object.select_all(action='DESELECT')
        #hide all inactive objects
        for obj in bpy.data.objects:
            #obj.hide_viewport = False #Enable visibility in all viewports
            obj.hide_render = True #Enable the object in renders
            #obj.hide_set(True) #Enable the object in the viewport
            obj.hide_select = True #Enable selection in the viewport
    
    def unHideAll(self):
        bpy.ops.object.select_all(action='DESELECT')
        #Unhide all inactive objects
        for obj in bpy.data.objects:
            obj.hide_render = False #Enable the object in renders
            obj.hide_set(False) #Enable the object in the viewport
            obj.hide_select = False #Enable selection in the viewport
    
    def unHideCameraAndLight(self):
        listObObjects = []
        listObObjects.append(bpy.data.objects["Camera1"])
        listObObjects.append(bpy.data.objects["Light"])
        listObObjects.append(bpy.data.objects["Fläche1"])
        listObObjects.append(bpy.data.objects["Fläche2"])
        listObObjects.append(bpy.data.objects["Fläche3"])
        listObObjects.append(bpy.data.objects["Fläche4"])
        for obj in listObObjects:
            obj.hide_render = False #Enable the object in renders
            obj.hide_set(False) #Enable the object in the viewport
            obj.hide_select = False #Enable selection in the viewport
        
    def saveMetadataAsJson(self, gemesis):
        #name is the name of the image = ("GΞMΞSIS" + id)
        data = {}
        data['traits'] = []
        data['traits'].append({
            "name": 'GΞMΞSIS' + str(gemesis.gemId), #CEHCKIF DISPLAYED RIGHT
            "description": 'This is GΞMΞSIS',
            "external_url": "https://openseacreatures.io/3", #CHANGE!!!!!!!!!!!! PROBABL REMOVE
            "image": "https://storage.googleapis.com/opensea-prod.appspot.com/puffs/" + str(gemesis.gemId) + ".png", #CHANGE ipfs://QmTy8w65yBXgyfG2ZBg5TrfB2hPjrDQH3RCQFJGkARStJb
            "attributes": [
                {
                    "trait_type": "Category", 
                    "value": "Crystal" #Stones, Crystal, Diamonds
                }, 
                {
                    "trait_type": "Material", 
                    "value": "Starfish" #Ruby #Emerald
                }, 
                {
                    "trait_type": "Cut", 
                    "value": "Big" #shapeshape
                }, 
                {
                    "trait_type": "Background", 
                    "value": str(gemesis.background.name)
                }, 
                {
                    "trait_type": "Table", 
                    "value": str(gemesis.table.name)
                }, 
                {
                    "trait_type": "Plinth", 
                    "value": str(gemesis.lowerBox.name)
                }, 
                {
                    "trait_type": "Case", 
                    "value": str(gemesis.upperBox.name)
                },
                {
                    "trait_type": "Talisman", 
                    "value": str(gemesis.talisman.name)
                },  
            ]
        })
        with open('metadata' + str(gemesis.gemId) + '.json', 'w') as outfile:
            json.dump(data, outfile) 
    
    def renderAndSaveImage(self, gemesis):
        # render settings
        bpy.context.scene.render.image_settings.file_format = 'PNG'
        bpy.context.scene.render.filepath = "D:\ProbeRender\gemesis_" + str(gemesis.gemId)
        bpy.ops.render.render(write_still = 1)
        print("Render and save done")
        

    def checkIfGemesisExists(self, hashNumber):
        if hashNumber in hashDictForChecking:
            return True
        else:
            hashDictForChecking[hashNumber] = True
            return False
        

##DO THE MAIN STUFF
i = 1 #gemID
generator = GemesisGenerator()
hashDictForChecking = {}
maxAmount = 100 #9669
while i <= maxAmount:
    generator.hideAll()
    generator.unHideCameraAndLight()
    allTraits = Traits()
    gemesis = generator.createRandomGem(i, allTraits)

    #Fortesting    
    #testUpperBox = allTraits.upperBoxes["UpperBox1"]
    #testLowerBox = allTraits.lowerBoxes["LowerBox1"]
    #testBackground = allTraits.backgrounds["Background1"]
    #testGemStone = allTraits.gemStones["GemStone1"]
    #testTable = allTraits.tables["Table1"]
    #testGemesis = Gemesis(i, testUpperBox, testLowerBox, testBackground, testGemStone, testTable)
    print (hash(gemesis))
    #generator.renderAndSaveImage(gemesis)
    #generator.saveMetadataAsJson(testGemesis)
    
    gemExists = generator.checkIfGemesisExists(hash(gemesis))
    if not gemExists:
        generator.renderAndSaveImage(gemesis)
        #generator.saveMetadataAsJson(gemesis)
        i = i + 1   





#{
#  "name": "OpenSea Creatures",
#  "description": "OpenSea Creatures are adorable aquatic beings primarily for demonstrating what can be done using the OpenSea platform. Adopt one today to try out all the OpenSea buying, selling, and bidding feature set.",
#  "image": "https://openseacreatures.io/image.png",
#  "external_link": "https://openseacreatures.io",
#  "seller_fee_basis_points": 100, # Indicates a 1% seller fee.
#  "fee_recipient": "0xA97F337c39cccE66adfeCB2BF99C1DdC54C2D721" # Where seller fees will be paid to.
#}

